/***********************************************************************
 *
 *                          Spring Notes
 *
 **********************************************************************/


/***** Inversion of Control (Dependency Injection) *****/

    Central IoC passes dependencies as needed to each class


/***** ApplicationContext *****/

    Read-Only wrapper of the BeanFactory
    IoC Container


/***** Java Configuration File *****/

    // import from other configuration files in 2 steps (wiring the spring beans)

        1.  @Import(DataConfig.class)
        2.  @Autowired
            private CustomerRepository customerRepository;


/***** Environment Variables *****/

    1.  set property source 
        @PropertySource("classpath:/application.properties")

    2.  grab the value from the source
        @Value("${greeting.text}")
        private String greetingText;

    3.  create class that will use the new variable
        public class Worker {
            private String text;
            Worker(String text) {
                this.text = text;
            }
            public void execute() {
                System.out.println("Hello " + this.text);
            }
        }

    4.  create a bean that returns a new worker object
        @Bean
        public Worker worker() {
            return new Worker(greetingText);
        }    

    5.  grab the worker bean and execute
        public static void main (String[] args) {
            ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
            OrderService orderService = context.getBean(OrderService.class);
            System.out.println(orderService==null?"NULL":"A OK");
            Worker worker = context.getBean(Worker.class);
            worker.execute();
        }

    6.  (optional) can also add as environment variable to over-write the variable from resources


/***** Profiles *****/

    // Load different beans depending on the profile

        @Bean
        @Profile("dev")
        public Worker workerForDev(){
            return new Worker("Hello", greetingText);
        }

        @Bean
        @Profile("prod")
        public Worker workerForProd(){
            return new Worker("Greetings", greetingText);
        }

    // Change the profiles by using environment variables

        spring.profiles.active=prod


/***** Spring Expression Language *****/

    @Value("#{new Boolean(environment['spring.profiles.active'] == 'dev')}")
    private boolean isDev;


/***** Bean Scopes *****/

    // Singleton Bean 
        - default scope
        - one instance per context definition
        - be careful with static data

    // Prototype Bean
        - new instance every time it is referenced
        - definition is stored in factory, instances are not
        - useful for transient data or types that flex based on application state

    // Web Only

        // Session
            - one instance of bean per user session
            - definition storedin bean factory, instance is not

        // Request
            - one instance per request
            - definition stored in bean factory, instance is not

    // Defining the scope of a bean
        @Bean
        @Scope("prototype")
        public Worker worker(){
            return new Worker(greetingPreamble, greetingText);
        }


/***** Proxy *****/

Proxies are aspects that add various behaviors to your class

Spring uses JDK and CGLIB proxies

    // Considerations
        Behavior added to classes only impacted by calls through the proxy
        Private methods


/***** Annotation Based Configuration *****/

    @Component and sterotypes

    // Dependency Injection with Component Scanning

        - DI is achieved through the @Autowired annotation
        - @Qualifier is used when multiple implementations of an interface are needed
        - Properties injected with @Value


    // Autowiring with Component Scan 

        1.  scan for components using @ComponentScan(basePackages = {"com.lynda.common"})
        2.  define @Service and @Repository classes
        3.  @Autowired on service constructors

    // Autowiring: Field Level

        - Private attributes can be Autowired (bad... don't do this)

    // Autowiring: Setter Injection

        - Used for optional dependencies
        - Used for changing dependencies

    // Autowiring: Constructor Injection

        - This is the preferred method for required dependencies

    // PostConstruct

        - @PostConstruct operates the same as InitializingBeanInterface
        - After the properties are set on all beans, the method is called:
            @PostConstruct
            public void init() {
                // do some initialization work
            }

    // PreDestroy

        - @PreDestroy operates the same as the DisposableBean interface
        - Executed when ApplicationContext closes
            @PreDestroy
            public void destroy() {
                // do some closing work
            }


/***** XML-Based Configuration *****/

    - XML elements are used for beans
    - XML attributes define details of the bean
    - XML namespaces provide simplicity

    // XML Namespaces

        - Util Namespace
            - Provides configuration for common utilities
            - Properties
            - Collections
            - Constants

        - JEE Namespace
            - Provides access to common J2EE constructs
            - JDNI
            - EJB stateless beans

        - JDBC
            - Provides abstractions for JDBC operations
            - Database connections
            - Embedded database support

        - JMS
        - TX (transactions)
        - AOP
        - Context


/***** Bean Lifecycle *****/

    // Initialization Phase

        - Begins with creation of ApplicationContext (wrapper for the BeanFactory)

        - BeanFactory initialization phase 
            1. Load Bean Definitions
                - Sources (Java Configuration / XML configuration / Component scanning)
                - Bean definitions must be static
            2. ID is used to create the index for the factory
            3. BeanFactory only contains references at this point
            4. BeanFactory Post-processors
                - Perform work on the entire BeanFactory
                - Can modify or transform any bean in the factory prior to instantiation
                - Most familiar example is the PropertySourcesPlaceholderConfigurer (injects property values into the bean before instantiation)
                - Can create your own by creating a BeanFactoryPostProcessor Interface

        - Bean initialization and instantiation 
            Instantiate -> Setters -> Bean Post-Processor -> Initializer -> Bean Post-Processor

            - Instantiate
                - Beans are instantiated in the factory using the constructors
                - Done in the correct order to ensure dependencies are created first
                - Handle to class instance remains in the bean factory for the lifecycle of the application for singletons
                - Eager vs Lazy
                    - By default, all beans are instantiated eagerly
                    - To truly be lazy, there can be nothing that depends on them
                - Objects are constructed and have pointers in the BeanFactory but are no yet available for use

            - Setters
                - After all beans have been instantiated
                - Setters are called
                - Autowiring occurs (non constructor based (i.e. setter and field))
                - After this step:
                    - All beans fully initialized
                    - All initial dependencies are injected
                    - Beans still not ready for use (spring needs to add its own behaviors to our classes)
            
            - Post-Processing
                - Final point of configuration manipulation
                - Each bean may have additional behaviors added 
                - BeanPostProcessor Interface
                    - The BeanPostProcessor interface allows you to inject common behavior to a class of beans
                    - Still operates on specific beans
                    - Types: before and after

    // Use Phase

        - Most of the tiem is spent in this phase
        - ApplicationContext serves proxies to the original class
        - ApplicationContext maintains handle to each bean (singleton)

    // Destruction Phase

        - Begins when close is called on the ApplicationContext
        - At that point any @PreDestroy method is called
        - Beans are not destroyed (just available for garbage collection)
        - Caveats 
            - Context cannot be reused again
            - Prototype beans are not impacted
            - Only GC actually destroys bean instances


/***** (AOP) Aspect Oriented Programming *****/

    Used for:
        - Logging 
        - Transaction Management
        - Caching
    
    Cross Cutting Concerns:
        - Evaluated business requirements and look for words like always or every
        - Look for system requirements that apply to multiple business requirements

    Spring Aspects
        - Leverages AspectJ for aspecting
        - Byte code modification (run time interweaving)
        - Dynamic proxy based
        - Parts:
            - Join Point: line of code that aspect is targeting
            - Pointcut: expression that identified the join point
            - Advice: code executed at a join point
            - Aspect: module that contains all the of pointcuts and advice that is injected
    
    // Defining AOP Pointcuts
        - Syntax - designator("r p.c.m(arg))
            - r - return type
            - p - package
            - c - class
            - m - method
            - arg - # of args

        - Common Designators
            - execution: expression for matching method execution
            - within: expressions for matching within certain types
            - target: expressions for matching a specific type
            - @annotation: expressions for matching a specific annotation


// Definitions

    ORM - Object to Relational Mapping - Integration with Hibernate and JPA
    JDBC - DB helper classes
    JMS - Java Messaging Service - sending async messages to a message broker
    JMX - Java Management Extension - Java agents to remotely monitor your app



            
/***********************************************************************
 *
 *                         Build with Gradle
 *
 **********************************************************************/

//  Create the directory structure

    In a project directory of your choosing, create the following subdirectory 
    structure; for example, with mkdir -p src/main/java/hello on *nix systems

//  Create sample classes

    GradleTest/src/main/java/hello/HelloWorld.java

    package hello;

        public class HelloWorld {
            public static void main(String[] args) {
                Greeter greeter = new Greeter();
                System.out.println(greeter.sayHello());
            }
        }

    GradleTest/src/main/java/hello/Greeter.java

        package hello;

        public class Greeter {
            public String sayHello() {
                return "Hello world!";
            }
        }

// Create a very basic build.gradle file in GradleTest

    Give it just just one line: apply plugin: 'java'


//  Add dependencies to the project

    Add source for 3rd party libraries:

        repositories {
            mavenCentral()
        }

//  Then add the dependencies

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile "joda-time:joda-time:2.2"
        testCompile "junit:junit:4.12"
    }

    //  Other types of dependencies

        providedCompile. Required dependencies for compiling the project code, 
        but that will be provided at runtime by a container running the code 
        (for example, the Java Servlet API).

        testCompile. Dependencies used for compiling and running tests, but 
        not required for building or running the project’s runtime code.


//  Finally, specify the name for our JAR artifact

    jar {
        baseName = 'gs-gradle'
        version =  '0.1.0'
    }


//  Building project with Gradle Wrapper

    These scripts allow you to run a Gradle build without requiring that Gradle be installed on your system.

    gradle wrapper --gradle-version 2.13

    
//  To view classes in the jar

    jar tvf build/libs/gs-gradle-0.1.0.jar


//  To make the code runnable, use gradle's application plugin

    Add to the build.gradle file:

        apply plugin: 'application'
        mainClassName = 'hello.HelloWorld'


//  And then run it

    ./gradlew run




/***********************************************************************
 *
 *                         Restful Web Service
 *
 **********************************************************************/


//  Create the directory structure

    mkdir -p src/main/java/hello on *nix systems:


//  Create Gradle build file

    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE")
        }
    }

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    bootJar {
        baseName = 'gs-rest-service'
        version =  '0.1.0'
    }

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    //  The Spring Boot gradle plugin provides many convenient features:

        It collects all the jars on the classpath and builds a single, runnable "über-jar", which makes it more convenient to execute and transport your service.

        It searches for the public static void main() method to flag as a runnable class.

        It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies. You can override any version you wish, but it will default to Boot’s chosen set of versions.    


//  Create a representation class

    // get request should return a 200 OK response with JSON in the body that represents a greeting

        {
            "id": 1,
            "content": "Hello, World!"
        }

    //  to *model* the greting, you crease a resource representation class.
        it will have fields, constructors, and accessors for the id and content data

        src/main/java/hello/Greeting.java

        package hello;

        public class Greeting {

            private final long id;
            private final String content;

            public Greeting(long id, String content) {
                this.id = id;
                this.content = Greecontent;
            }

            public long getId() {
                return id;
            }

            public String getContent() {
                return content;
            }
        }


//  Create a Resource Controller

    - HTTP requests are handled by a controller. These components are easily identified by the @RestController annotation

    - Spring uses the Jackson JSON library to automatically marshal instances of type Greeting into JSON.
    - Because Jackson 2 is on the classpath, Spring’s MappingJackson2HttpMessageConverter is automatically chosen to convert the Greeting instance to JSON

    src/main/java/hello/GreetingController.java

    package hello;

    import java.util.concurrent.atomic.AtomicLong;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    import org.springframework.web.bind.annotation.RestController;


    // shorthand for @Controller and @ResponseBody rolled together
    @RestController
    public class GreetingController {

        private static final String TEMPLATE = "Hello, %s!";
        private final AtomicLong counter = new AtomicLong();

        /**
        * The @RequestMapping annotation ensures that HTTP requests to /greeting are mapped to the greeting() method.
        *
        * The above example does not specify GET vs. PUT, POST, and so forth, because @RequestMapping maps all HTTP
        * operations by default. Use @RequestMapping(method=GET) to narrow this mapping.
        **/
        @RequestMapping("/greeting")
        public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {
            return new Greeting(counter.incrementAndGet(),
                    String.format(TEMPLATE, name));
        }

    }


//  Making the Application Executable

    - Can package this service as a traditional WAR file for deployment to an external application server
        or
    
    // Use Spring’s support for embedding the Tomcat servlet container as the HTTP runtime, instead of deploying to an external instance

    src/main/java/hello/Application.java

    package hello;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    /**
    * @SpringBootApplication is a convenience annotation that adds all of the following:
    *
    * @Configuration tags the class as a source of bean definitions for the application context.
    *
    * @EnableAutoConfiguration tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.
    *
    * Normally you would add @EnableWebMvc for a Spring MVC app, but Spring Boot adds it automatically when it sees spring-webmvc on the classpath. This flags the application as a web application and activates key behaviors such as setting up a DispatcherServlet.
    *
    * @ComponentScan tells Spring to look for other components, configurations, and services in the hello package, allowing it to find the controllers.
    */
    @SpringBootApplication
    public class Application {

        public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
        }

    }


//  Build an Executable JAR

    - If you are using Gradle, you can run the application:
        ./gradlew bootRun. 
    - Or you can build the JAR file:
        ./gradlew build. 
    - Then you can run the JAR file:
        java -jar build/libs/gs-rest-service-0.1.0.jar

    // Test by going to http://localhost:8080/greeting and http://localhost:8080/greeting?name=User 




/***********************************************************************
 *
 *                         Scheduled Tasks
 *
 **********************************************************************/

//  Create a scheduled task

    package hello;

    import java.text.SimpleDateFormat;
    import java.util.Date;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.scheduling.annotation.Scheduled;
    import org.springframework.stereotype.Component;


    @Component
    public class ScheduledTasks {

        private static final Logger log = LoggerFactory.getLogger(ScheduledTasks.class);

        private final SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");

        /**
        * The @Scheduled annotation defines when the method runs
        *
        * fixedRate: specifies the interval between method invocations measured from the start time of each invocation
        * fixedDelay: specifies the interval between invocations measured from the completion of the task
        *
        * Can also use @Scheduled(cron=". . .") for more advanced task scheduling
        */
        @Scheduled(fixedRate = 5000)
        public void reportCurrentTime() {
            log.info("The time is now {}", dateFormat.format(new Date()));
        }

    }


//  Enable scheduling via a main method




/***********************************************************************
 *
 *                         Udemy - Spring Notes
 *
 **********************************************************************/


/***** Using Spring inversion of control to get objects *****/

    1. use Spring container (object factory)
        a. create and manage objects (Inversion of Control)
        b. inject object's dependencies (Dependency Injection)
    2. 3 ways to configure spring container
        a. XML configuration file (legacy)
        b. Java Annotations (modern)
        iii. Java Source Code (modern)


/***** Bean Scope (Lifecycle) *****/

    // Types of Beans

        1. Singleton (default scope)
            a. spring container only creates one instance of the bean
            b. it is cached in memory
            c. all requests for it will have to share
            d. can be set with scope="singleton"

        2. Prototype 
            a. creates a new bean instance for each container request

        3. Request
            a. scoped to an HTTP web request. Only used for web apps.

        4. Session
            a. scopted to an HTTP web session. Only used for web apps.

        5. Global-Session
            a. scoped to a global HTTP web session. Only used for web apps.

    // Bean Lifecycle

        1. Container Started
        2. bean Instantiated 
        3. Dependencies injected
        4. Internal Spring Processing
        5. Your Custom Init Method (hook into)
            a. custom business logic methods
            b. setting up handles to resources (db, sockets, file, etc.)
            c. called by using method -> init-method="doMyStartupStuff"
        6. ----Bean Now Ready For Use----
        7. Your Custom Destroy Method
            a. reverse of #5
            b. called by using method -> destroy-method="doMyCleanupStuff"

    // Development Process

        1. Define your methods for init and destroy
            a. returns nothing, so use void
            b. cannot accept any arguments
        2. Configure the method names in the Spring config file
            a. <bean id="myCoach"
                     class="main.java.coachdemo.FootballCoach"
                     scope="singleton"
                     init-method="doStartUpStuff"
                     destroy-method="doCleanUpStuff">
            b. destroy method not called for "prototype" scoped beans


/***** Getting Resources *****/

1. Get application context

    @Autowired
    private ApplicationContext context;

2. Get resource from some source 

    a. File system

        Resource resource = appContext.getResource("file:c:\\testing.txt");

    b. URL path

        Resource resource =
            appContext.getResource("url:http://www.yourdomain.com/testing.txt");

    c. Class path

        Resource resource =
            appContext.getResource("classpath:com/mkyong/common/testing.txt");

3. Use resource to get input stream

    try (BufferedReader br = new BufferedReader(new InputStreamReader(resource.getInputStream()))) {
        ArrayList<String> fortuneList = new ArrayList<>();
        String line;
        while ((line = br.readLine()) != null) {
            fortuneList.add(line);
        }
        tempFortunes = fortuneList.toArray(new String[fortuneList.size()]);
    } catch (Exception e) {
        // bad stuff happened
    }



/***********************************************************************
 *
 *                       Udemy - Spring with XML
 *
 **********************************************************************/


/***** 1.a. Create and Manage Objects (IoC - Inversion of Control) *****/

1. Configure your Spring Beans
    a. using XML
        <beans ..>
            <bean id="myCoach">
                class="com.main.java.coachdemo.BaseballCoach">
            </bean>
        </beans>
2. Create a Spring Container (aka the ApplicationContext)
    a. using XML
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
3. Retrieve Beans from Spring Container ( Beans are just objects created by the Spring Container! )
    a. using XML
        Coach theCoach = context.getBean("myCoach" /* refers to the id in the xml */, Coach.class /* the interface and class */);


/***** 1.b. Inject Dependencies (DI) *****/

//  Constructor Injection 

    1. Define the dependency interface and its class
    2. Create a constructor in your class for injections
        a. define field:        
            private FortuneService fortuneService;
        b. define constructor for dependency injection:  
            public BaseballCoach(FortuneService fortuneService) { this.fortuneService = fortuneService; }
    3. Configure the DI in spring config file
        a. create the fortune service bean 
            <bean id="myFortuneService"
                class="main.java.coachdemo.HappyFortuneService">
            </bean>
        b. use it in the constructor
            <bean   id="footballCoach"
                    class="main.java.coachdemo.FootballCoach">
                        <constructor-arg ref="myFortuneService"/>
            </bean>


//  Setter Injection

    1. Create setter methods in your class for injections
        a. public void setFortuneService(FortuneService fortuneService) { this.fortuneService = fortuneService; }
    2. Configure the dependency injection in Spring config file
        a. the set method will use the name attribute in the property tag
        b. <bean  id="cricketCoach"
                  class="main.java.coachdemo.CricketCoach">
                    <!-- set up setter injection (will call setFortuneService (capitalizes first letter of name)) -->
                    <property name="fortuneService" ref="myFortuneService" />
            </bean>


//  Literal Injections (from config file)

    1. Create setter methods in your class for injections

        private String emailAddress;
        private String team;

        public void setEmailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
        }

        public void setTeam(String team) {
            this.team = team;
        }
    2. Configure the injection in Spring config file


// Read from Properties File

    1. Create Properties file
        a.  key value pairs in sport.properties file
            foo.team = strikers
    2. Load Properties file in Spring config file
        a.  <context:property-placeholder location="classpath:sport.properties" />
    3. Reference values from Properties file
        a.  reference in the bean's xml with value="${foo.team}"




/***********************************************************************
 *
 *                 Udemy - Spring with Java Annotations
 *
 **********************************************************************/


//  What are @annotations?

    1. special labels/markers added to Java classes
    2. provide meta-data about the class
    3. processed at compile time or run-time for special processing


//  Development Process for using Spring Annotations

    1. Enable componenet scanning in Spring config file
        a. <context:component-scan base-package="main.java.coachdemo" />
    2. Add the @Component Annotation to yoru Java classes
        a. @Component("tennisCoach")
        b. can also use default bean id
            i. just makes first letter of the class name lowercase
    3. Retrieve bean from Spring container
        a. (same) Coach theCoach = context.getBean("sampleCoach", Coach.class);


//  Dependency Injection with @Autowired

    1. Define the dependency interface and class
    2. Create a constructor in your class for injections 
    3. Configure the dependency injection with @Autowired annotation (use @Qualifier if multiple interface implementations)
        a. in constructor
            @Autowired
            public PingPongCoach(FortuneService fortuneService) {
                this.fortuneService = fortuneService;
            }
        b. in setter (or any method in the class)
            @Autowired
            public void setFortuneService(FortuneService fortuneService) {
                this.fortuneService = fortuneService;
            }
        c. field injection (using java reflection)
            @Autowired
            private FortuneService fortuneService;


//  Qualifiers for Multiple Interface Implementations

    // for setters
        @Autowired
        @Qualifier("sadFortuneService")  // used when there are multiple interface implementations
        public void setFortuneService(FortuneService fortuneService) {
            this.fortuneService = fortuneService;
        }
    
    // for field injection
        @Autowired
        @Qualifier("nameOfService")

    // for constructor
        @Autowired
        public PingPongCoach(@Qualifier("randomFortuneService") FortuneService fortuneService) {
            this.fortuneService = fortuneService;
        }


//  Inject properties file using Java annotations

    1. Create a properties file to hold your properties. It will be a name value pair.  

        New text file:  src/sport.properties

        foo.email=myeasycoach@luv2code.com
        foo.team=Silly Java Coders

    2. Load the properties file in the XML config file

        <context:property-placeholder location="classpath:sport.properties"/>

    3. Inject the properties values into your Swim Coach: SwimCoach.java

        @Value("${foo.email}")
        private String email;
            
        @Value("${foo.team}")
        private String team;


//  End of bean liftcycle process

    @PostConstruct 


//  Scope Annotations

    @Component
    @Scope("singleton") // for single object or @Scope("prototype") for different objects
    public class TennisCoach implements Coach {}


//  Lifecycle Methods Annotations

    // start up (after the constructor)
    @PostConstruct

    // clean up (before bean is destroyed)
    @PreDestroy

    // notes
        - can have any access modifier (public, protected, private)
        - cannot return anything so make it void
        - does not accept any arguments
        - to fix on java 9
            1. Download the javax.annotation-api-1.2.jar from:
            http://central.maven.org/maven2/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.jar
            2. Copy the JAR file to the lib folder of your project




/***********************************************************************
 *
 *                 Udemy - Spring with Java Code
 *
 **********************************************************************/


//  Types of Spring Configurations
    1. Full XML Config
    2. XML with Component Scan
    3. ! Java Configuration Class !


//  Java Configuration Class

    1. Create a Java class and annotate as @Configuration

        @Configuration
        public class SportConfig {}

    2. Add component scanning support: @ComponentScan (optional)

        @Configuration
        @ComponentScan("com.whatever.demo") <---- 
        public class SportConfig {}

    3. Read Spring Java configuration class

        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SportConfig.class);

    4. Retrieve bean from Spring container

        Coach theCoach = context.getBean("tennisCoach", Coach.class);


//  Defining Beans in Java Configuration Class

    1. Define method to expose bean

        @Configuration
        public class SportConfig {

            // define each bean individually in this config class
            @Bean
            public Coach swimCoach() {
                SwimCoach mySwimCoach = new SwimCoach();
                return mySwimCoach;
            }
        }

    2. Inject bean dependencies

        @Configuration
        // @ComponentScan("com.javaconfig.demo") // not required if defining manually below
        public class SportConfig {

            // define bean for the happy fortune service
            @Bean
            public FortuneService happyFortuneService() {
                return new HappyFortuneService();
            }

            // define bean for our swim coach AND inject dependency
            @Bean
            public Coach swimCoach() {
                return new SwimCoach(happyFortuneService());   // note: same name as above bean
            }

        }

    3. Read Spring Java configuration class

        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SportConfig.class);

    4. Retrieve bean from Spring container

        Coach theCoach = context.getBean("swimCoach", Coach.class);


//  Injecting Values from Properties File

    1. Create properties file

        coach.properties 

        foo.email=somecoach@coaches.com
        foo.teamname=strikers

    2. Load properties file into Spring configuration

        @Configuration
        @PropertySource("classpath:coach.properties")
        public class SportConfig {}

    3. Reference values from properties file

        public class SwimCoach implements Coach {

            @Value("${foo.email}")
            private String email;

            @Value("${foo.teamname}")
            private String teamName;
        }
    
    4. Note when running version of spring < 4.2

        // add to configuration class to add support to resolve ${...} properties
        @Bean
        public static PropertySourcesPlaceholderConfigurer
                        propertySourcesPlaceHolderConfigurer() {
            
            return new PropertySourcesPlaceholderConfigurer();
        }




/***********************************************************************
 *
 *                         Udemy - Spring MVC
 *
 **********************************************************************/


- Framework for building web applications in Java
- Based on Model-View-Controller design pattern
- Leverages features of the Core Spring Framework (IoC, DI)


//  Benefits

    - Spring way of building web apps UIs in Java
    - Leverage a set of reusable UI components
    - Help manage applicaiton state for web requests
    - Process form data: validation, conversion, etc
    - Flexible configuration for the view layer


//  Model-View-Controller (MVC)

    Web Browser ---->   Front Controller
                            |
                            v
                        Controller 
                            |
                            v
    Web Browser <----   View Template


//  Front Controller

    - Known as DispatcherServlet
        - Part of the spring framework
        - Already developed by spring dev team


//  Controller

    - Contains the business logic 
        - Handle the request
        - Store / Retrieve the data (DB, web service, ...)
        - Place data in model
    - Send to appropriate view template


//   Model

    - Contains the data 
    - Store / Retrieve data via backend systems 
        - DB, web service, etc
        - (Can also use a spring bean)
    - Place your data in the model
        - Data can be any Java object / collection


//  View Template

    - Supports many view templates
    - Most common is JSP (Java Server Pages) + JSTL (JSP Standard Tag Library)
    - Create a page and display the model data




/****** New MVC project in intellij ******/

    1. New project -> spring -> MVC
    2. In \WEB-INF\web.xml change *.form to /
    3. Go to project structure and fix errors
        a. Add Spring-4.3.6-RELEASE to artifact
        b. Add Spring MVC-4.3.6-RELEASE to artifact
    4. Create controller class
    5. Edit \WEB-INF\dispatcher-servlet.xml
        a. <context:component-scan base-package="com.mvc.demo" />
        b. <mvc:annotation-driven/>
        c.  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="prefix" value="/WEB-INF/views/" />
                <property name="suffix" value=".jsp" />
            </bean>    
    7. Create views folder and move index.jsp
    8. Set up tomcat and run 


//  Spring MVC Configuration Process

    1. Configure Spring MVC Dispatcher Servlet

        web.xml

        <web-app

            <servlet>
                <servlet-name>dispatcher</servlet-name>
                <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                <init-param>
                    <param-name>contextConfigLocation</param-name>
                    <param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>
                </init-param>
                <load-on-startup>1</load-on-startup>
            </servlet>

    2. Set up URL mappings to the dispatcher servlet

            <servlet-mapping>
                <servlet-name>dispatcher</servlet-name>
                <url-pattern>/</url-pattern>
            </servlet-mapping>

        </web-app>

    3. Add configurations to file: WEB-INF/spring-mvc-demo-servlet.xml

        a. Add support for Spring component scanning

            <beans>
                <context:component-scan base-package="com.luv2code.springdemo" />

        b. Add support for conversion, formatting, and validation

                <mvc:annotation-driven/>

        c. Configure Spring MVC View Resolver

                <bean
                    class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="prefix" value="/WEB-INF/view/" />
                    <property name="suffix" value=".jsp" />
            </beans>


// Create a spring home controller

    1. Create Controller Class

        @Controller     // inherits from component
        public class HomeController {

    2. Define Controller method

            public String showMyPage() {}

    3. Add Request Mapping to the Controller method

            @RequestMapping("/") 
            public String showMyPage() {}

    4. Return the view name
    5. Develop the view page




/***** Reading Form Data *****/

    // controller method to show the name html form
       
    @GetMapping("/nameForm")
    public String nameForm() {
        return "name-form";
    }

    <form action="/nameGreeting" method="GET">
        <input type="text" name="name" placeholder="What is your name?" />
        <input type="submit" />
    </form>


    // controller method to process the name form
    @GetMapping("/nameGreeting")
    public String nameGreeting() {
        return "name-greeting";
    }

    <h1>Hello ${param.name}! Welcome to MVC</h1>




/***** Adding Data to the Spring Model *****/

    - Model is a container for the application data
    - In your Controller
        - You can put anything in the model (strings, info from db, etc)
    - View page (JSP) can access data from the model 

    - Ex:

        // new route that processes the name first
        @GetMapping("/processName")
        public String processName(WebRequest request, Model model) {

            // read request parameter from the HTML form
            String theName = request.getParameter("name");

            // convert to all caps
            theName = theName.toUpperCase();

            // create the message
            String message = "Yo " + theName + "!";

            // add message to the model
            model.addAttribute("message", message);

            return "name-greeting";
        }

        // get the new message
        <h1>${message}</h1>




/***** Using CSS, JavaScript and Images in Spring MVC Web App *****/




























































































